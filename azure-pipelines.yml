# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - LICENSE
      - README.md

jobs:
- job: Determine
  steps:
  - pwsh: |
      $changedFiles = git diff --name-only HEAD HEAD^
      $matches = $changedFiles | Select-Object | Select-String -Pattern "mingw-w64-(.*)/PKGBUILD" | %{$_.matches.groups[1].value} | Select-Object -Unique
      $mustPackage = $matches.Count -gt 0
      $cm = $matches | Join-String -Separator ","
      Write-host "##vso[task.setvariable variable=Packages;isOutput=true;]$cm"
      Write-host "vso[task.setvariable variable=Packages;isOutput=true;]$cm"
      Write-host "##vso[task.setvariable variable=MustPackage;isOutput=true;]$mustPackage"
      Write-host "vso[task.setvariable variable=MustPackage;isOutput=true;]$mustPackage"
    displayName: "Find changed packages"
    name: Det

- job: Package
  dependsOn: Determine
  variables:
    mustPackage: $[ dependencies.Determine.outputs['Det.MustPackage'] ]
    packages: $[ dependencies.Determine.outputs['Det.Packages'] ]
  condition: eq(variables.mustPackage, 'True')
  timeoutInMinutes: 0
  strategy:
    matrix:
      MINGW64:
        target: 'x86_64'
        prefix: 'mingw64'
        MSYSTEM: 'MINGW64'
      UCRT64:
        target: 'ucrt-x86_64'
        prefix: 'ucrt64'
        MSYSTEM: 'UCRT64'
      CLANG64:
        target: 'clang-x86_64'
        prefix: 'clang64'
        MSYSTEM: 'CLANG64'
  pool:
    vmImage: 'windows-latest'

  steps:
  - pwsh: |
      git config core.autocrlf false
      rm .git/index
      git reset --hard
    displayName: "Fix CRLF"

  - pwsh: |
      $env:PATH="$PATH;C:\msys64\$(prefix)\bin;C:\msys64\usr\bin;"
      C:\msys64\usr\bin\pacman.exe -Syu --noconfirm
      C:\msys64\usr\bin\pacman.exe -S --noconfirm binutils diffutils make patch
    displayName: "Install pre-package dependencies"

  - pwsh: |
      $env:PATH="$PATH;C:\msys64\$(prefix)\bin;C:\msys64\usr\bin;"
      $packages = "$(Packages)" -split ","
      foreach ($p in $packages)
      {
        Write-Host "Package $p"
        pushd mingw-w64-$p
        C:\msys64\usr\bin\bash.exe -c "makepkg-mingw -s --noconfirm --nocheck WINAPI_NO_BUNDLED_LIBRARIES=1"
        popd
      }
    displayName: "Package"
    env:
      MSYSTEM: $(MSYSTEM)

  - task: CopyFiles@2
    inputs:
      contents: '**/*.pkg.tar.*' 
      targetFolder: $(build.artifactstagingdirectory)
      flattenFolders: true
      preserveTimestamp: true
    displayName: "Copy packages"

  - task: PublishBuildArtifacts@1
    inputs:
      ArtifactName: 'g4w'

- job: Publish
  dependsOn:
  - Determine
  - Package
  pool:
    vmImage: 'windows-latest'

  variables:
  - name: packages
    value: $[ dependencies.Determine.outputs['Det.Packages'] ]
  - group: GitHubPATGroup

  steps:
  - pwsh: |
      git clone https://github.com/Berrysoft/msys-git-for-windows.git --branch publish $(Build.SourcesDirectory)/repo
      cd $(Build.SourcesDirectory)/repo
      rm -r -Force .git
      rm g4w*
      $packages = "$(Packages)" -split ","
      foreach ($p in $packages)
      {
        rm *-$p-[0-9]*
      }
    displayName: "Clone registry"

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'g4w'
      path: $(Build.SourcesDirectory)/repo
    displayName: "Download packages"

  - pwsh: |
      $env:PATH="$PATH;C:\msys64\usr\bin;"
      cd $(Build.SourcesDirectory)/repo
      C:\msys64\usr\bin\bash.exe -c "repo-add g4w.db.tar.gz *"
    displayName: "Run repo-add"

  - pwsh: |
      git config --global user.name "$(GitHubName)"
      git config --global user.email "$(GitHubEmail)"
      cd $(Build.SourcesDirectory)/repo
      git init
      git checkout -b publish
      git add -A
      git commit -m "Create build $(Build.BuildId)"
      git push -f https://$(GitHubPAT)@github.com/Berrysoft/msys-git-for-windows.git publish
    displayName: 'Publish to GitHub'
